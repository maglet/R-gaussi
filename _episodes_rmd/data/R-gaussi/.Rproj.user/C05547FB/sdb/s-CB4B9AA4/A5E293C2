{
    "collab_server" : "",
    "contents" : "---\ntitle: \"Introduction to R and RStudio\"\nteaching: 30\nexercises: 10\nquestions:\n- \"How to find your way around RStudio?\"\n- \"How to interact with R?\"\n- \"How to manage your environment?\"\nobjectives:\n- \"Describe the purpose and use of each pane in the RStudio IDE\"\n- \"Locate buttons and options in the RStudio IDE\"\n- \"Create and assign values to variables\"\n- \"Use mathematical and comparison operators\"\n- \"Call functions\"\n- \"Manage packages\"\nkeypoints:\n- \"Use RStudio to write and run R programs.\"\n- \"R has the usual arithmetic operators and mathematical functions.\"\n- \"Use `<-` to assign values to variables.\"\n- \"Use `ls()` to list the variables in a program.\"\n- \"Use `rm()` to delete objects in a program.\"\n- \"Use `install.packages()` to install packages (libraries).\"\nsource: Rmd\n---\n\n```{r, include=FALSE}\nsource(\"../bin/chunk-options.R\")\nknitr_fig_path(\"01-\")\n```\n\n## Motivation\n\nScience is a multi-step process: once you've designed an experiment and collected\ndata, the real fun begins! This lesson will teach you how to start this process using\nR and RStudio. We will begin with raw data, perform exploratory analyses, and learn\nhow to plot results graphically. This example starts with a dataset from\n[gapminder.org](https://www.gapminder.org) containing population information for many\ncountries through time. \n\n### By the end of these lessons you will be able to\n- read data into R \n- plot the population for Senegal? \n- calculate the average income for Asian countries\n- plot the populations for all of these countries\n\n## If you're using your own computer:\n\nPlease ensure you have the latest version of R and RStudio installed on your machine. This is important, as some packages used in the workshop may not install correctly (or at all) if R is not up to date.\n\n- [Download and install the latest version of R here](https://www.r-project.org/)\n\n- [Download and install RStudio here](https://www.rstudio.com/)\n\n## Introduction to RStudio\n\nThis lesson covers the fundamentals of\nthe R language as well as some best practices for organizing code for\nscientific projects that will make your life easier.\n\nWe'll be using RStudio: a free, open source R integrated development\nenvironment. It provides a built in editor, works on all platforms (including\non servers) and provides many advantages such as integration with version\ncontrol and project management.\n\n### At startup,  RStudio has three panels:\n\n  * The interactive R console (entire left)\n  * Environment/History (tabbed in upper right)\n  * Files/Plots/Packages/Help/Viewer (tabbed in lower right)\n\n![RStudio layout](../fig/01-rstudio.png)\n\nOnce you open files, such as R scripts, an editor panel will also open\nin the top left.\n\n![RStudio layout with .R file open](../fig/01-rstudio-script.png)\n\n\n## Workflow within RStudio\nThere are two main ways one can work within RStudio.\n\n1. Test and play within the interactive R console then copy code into\na .R file to run later.\n   *  This works well when doing small tests and initially starting off.\n   *  It quickly becomes laborious\n2. Start writing in an .R file and use RStudio's command / short cut\nto push current line, selected lines or modified lines to the\ninteractive R console.\n   * This is a great way to start; all your code is saved for later\n   * You will be able to run the file you create from within RStudio\n   or using R's `source()`  function.\n\n> ## Tip: Running segments of your code\n>\n> RStudio offers you great flexibility in running code from within the editor\n> window. There are buttons, menu choices, and keyboard shortcuts. \n>\n>To *run the current line*, you can \n>\n> 1. click on the `Run` button above the editor panel,\n> 2. select `Run Lines` from the `Code` menu, or \n> 3. hit Ctrl-Enter in Windows or Linux or Command-Enter on OS X. (This shortcut can also be seen by hovering\n> the mouse over the button). \n>\n> To *run a block of code*, select it and then `Run`.\n> \n> If you have modified a line of code within a block of code you have just run,\n> there is no need to reselct the section and `Run`, you can use the next button\n> along, `Re-run the previous region`. This will run the previous code block\n> including the modifications you have made.\n{: .callout}\n\n## Introduction to R\n\nMuch of your time in R will be spent in the R interactive\nconsole. This is where you will run all of your code, and can be a\nuseful environment to try out ideas before adding them to an R script\nfile. This console in RStudio is the same as the one you would get if\nyou typed in `R` in your command-line environment.\n\nThe first thing you will see in the R interactive session is a bunch\nof information, followed by a \">\" and a blinking cursor. It operates \non  a \"Read, evaluate, print loop\": \n1. you type in commands, \n2. R tries to execute them, \n3. and then returns a result.\n\n## Using R as a calculator\n\nThe simplest thing you could do with R is do arithmetic:\n\n```{r}\n1 + 100\n```\n\nAnd R will print out the answer, with a preceding \"[1]\". Don't worry about this\nfor now, we'll explain that later. For now think of it as indicating output.\n\nIf you type in an incomplete command, R will wait for you to\ncomplete it:\n\n~~~\n> 1 +\n~~~\n{: .r}\n\n~~~\n+\n~~~\n{: .output}\n\nAny time you hit return and the R session shows a \"+\" instead of a \">\", it\nmeans it's waiting for you to complete the command. If you want to cancel\na command you can simply hit `Esc` and RStudio will give you back the \">\"\nprompt.\n\nWhen using R as a calculator, the order of operations is the same as you\nwould have learned back in school.\n\nFrom highest to lowest precedence:\n\n * Parentheses: `(`, `)`\n * Exponents: `^` or `**`\n * Divide: `/`\n * Multiply: `*`\n * Add: `+`\n * Subtract: `-`\n\n```{r}\n3 + 5 * 2\n```\n\nUse parentheses to group operations in order to force the order of\nevaluation if it differs from the default, or to make clear what you\nintend.\n\n```{r}\n(3 + 5) * 2\n```\n\nThis can get unwieldy when not needed, but  clarifies your intentions.\nRemember that others may later read your code.\n\n```{r, eval=FALSE}\n(3 + (5 * (2 ^ 2))) # hard to read\n3 + 5 * 2 ^ 2       # clear, if you remember the rules\n3 + 5 * (2 ^ 2)     # if you forget some rules, this might help\n```\n\n\nThe text after each line of code is called a\n\"comment\". Anything that follows after the hash symbol\n`#` is ignored by R when it executes code.\n\n## Mathematical functions\n\nR has many built in mathematical functions. To call a function,\nwe simply type its name, followed by  open and closing parentheses.\nAnything we type inside the parentheses is called the function's\narguments:\n\n```{r}\nsin(1)  # trigonometry functions\n```\n\n```{r}\nlog(1)  # natural logarithm\n```\n\n```{r}\nlog10(10) # base-10 logarithm\n```\n\n```{r}\nexp(0.5) # e^(1/2)\n```\n\nDon't worry about trying to remember every function in R. You\ncan simply look them up on Google, or if you can remember the\nstart of the function's name, use the tab completion in RStudio.\n\nThis is one advantage that RStudio has over R on its own, it\nhas auto-completion abilities that allow you to more easily\nlook up functions, their arguments, and the values that they\ntake.\n\nTyping a `?` before the name of a command will open the help page\nfor that command. As well as providing a detailed description of\nthe command and how it works, scrolling to the bottom of the\nhelp page will usually show a collection of code examples which\nillustrate command usage. We'll go through an example later.\n\n## Comparing things\n\nWe can also do comparison in R:\n\n```{r}\n1 == 1  # equality (note two equals signs, read as \"is equal to\")\n```\n\n```{r}\n1 != 2  # inequality (read as \"is not equal to\")\n```\n\n```{r}\n1 < 2  # less than\n```\n\n```{r}\n1 <= 1  # less than or equal to\n```\n\n```{r}\n1 > 0  # greater than\n```\n\n```{r}\n1 >= -9 # greater than or equal to\n```\n\n> ## Tip: Comparing Numbers\n>\n> A word of warning about comparing numbers: you should\n> never use `==` to compare two numbers unless they are\n> integers (a data type which can specifically represent\n> only whole numbers).\n>\n> Computers may only represent decimal numbers with a\n> certain degree of precision, so two numbers which look\n> the same when printed out by R, may actually have\n> different underlying representations and therefore be\n> different by a small margin of error (called Machine\n> numeric tolerance).\n>\n> Instead you should use the `all.equal` function.\n>\n> Further reading: [http://floating-point-gui.de/](http://floating-point-gui.de/)\n>\n{: .callout}\n\n## Variables and assignment\n\nWe can store values in variables using the assignment operator `<-`, like this:\n\n```{r}\nx <- 1/40\n```\n\nNotice that assignment does not print a value. Instead, we stored it for later\nin something called a **variable**. `x` now contains the **value** `0.025`:\n\n```{r}\nx\n```\n\nLook for the `Environment` tab in one of the panes of RStudio, and you will see that `x` and its value\nhave appeared. Our variable `x` can be used in place of a number in any calculation that expects a number:\n\n```{r}\nlog(x)\n```\n\nNotice also that variables can be reassigned:\n\n```{r}\nx <- 100\n```\n\n`x` used to contain the value 0.025 and and now it has the value 100.\n\nAssignment values can contain the variable being assigned to:\n\n```{r}\nx <- x + 1 #notice how RStudio updates its description of x on the top right tab\n```\n\nThe right hand side of the assignment can be any valid R expression.\nThe right hand side is *fully evaluated* before the assignment occurs.\n\n> ## Challenge 1\n>\n> What will be the value of each  variable  after each\n> statement in the following program?\n>\n> ```{r, eval=FALSE}\n> mass <- 47.5\n> age <- 122\n> mass <- mass * 2.3\n> age <- age - 20\n> ```\n>\n> > ## Solution to challenge 1\n> >\n> > ```{r ch2pt1-sol}\n> > mass <- 47.5\n> > ```\n> > This will give a value of `r mass` for the variable mass\n> >\n> > ```{r ch2pt2-sol}\n> > age <- 122\n> > ```\n> > This will give a value of `r age` for the variable age\n> >\n> > ```{r ch2pt3-sol}\n> > mass <- mass * 2.3\n> > ```\n> > This will multiply the existing value of `r mass/2.3` by 2.3 to give a new value of\n> > `r mass` to the variable mass.\n> >\n> > ```{r ch2pt4-sol}\n> > age <- age - 20\n> > ```\n> > This will subtract 20 from the existing value of `r age + 20 ` to give a new value\n> > of `r age` to the variable age.\n> {: .solution}\n{: .challenge}\n\n> ## Challenge 2\n>\n> Run the code from the previous challenge, and write a command to\n> compare mass to age. Is mass larger than age?\n>\n> > ## Solution to challenge 2\n> >\n> > One way of answering this question in R is to use the `>` to set up the following:\n> > ```{r ch3-sol}\n> > mass > age\n> >```\n> > This should yield a boolean value of TRUE since `r mass` is greater than `r age`.\n> {: .solution}\n{: .challenge}\n\n### Rules for variable naming\n1. Variable names can contain letters, numbers, underscores and periods. \n\n2. They cannot start with a number nor contain spaces at all. \n\n3. Different people use different conventions for long variable names, these include\n\n  * periods.between.words\n  * underscores\\_between_words\n  * camelCaseToSeparateWords\n\nWhat you use is up to you, but **be consistent**.\n\n> ## Challenge 3\n>\n> Which of the following are valid R variable names?\n> ```{r, eval=FALSE}\n> min_height\n> max.height\n> _age\n> .mass\n> MaxLength\n> min-length\n> 2widths\n> celsius2kelvin\n> ```\n>\n> > ## Solution to challenge 3\n> >\n> > The following can be used as R variables:\n> > ```{r ch1pt1-sol, eval=FALSE}\n> > min_height\n> > max.height\n> > MaxLength\n> > celsius2kelvin\n> > ```\n> >\n> > The following creates a hidden variable:\n> > ```{r ch1pt2-sol, eval=FALSE}\n> > .mass\n> > ```\n> >\n> > The following will not be able to be used to create a variable\n> > ```{r ch1pt3-sol, eval=FALSE}\n> > _age\n> > min-length\n> > 2widths\n> > ```\n> {: .solution}\n{: .challenge}\n\nIt is also possible to use the `=` operator for assignment:\n\n```{r}\nx = 1/40\n```\n\nBut this is much less common among R users.  The most important thing is to\n**be consistent** with the operator you use. There are occasionally places\nwhere it is less confusing to use `<-` than `=`, and it is the most common\nsymbol used in the community. So the recommendation is to use `<-`.\n\n\n## Managing your environment\n\nThere are a few useful commands you can use to interact with the R session.\n\n`ls` will list all of the variables and functions stored in the global environment\n(your working R session):\n\n```{r}\nls()\n```\n\n> ## Tip: hidden objects\n>\n> Like in the shell, `ls` will hide any variables or functions starting\n> with a \".\" by default. To list all objects, type `ls(all.names=TRUE)`\n> instead\n>\n{: .callout}\n\nNote here that we didn't given any arguments to `ls`, but we still\nneeded to give the parentheses to tell R to call the function.\n\nIf we type `ls` by itself, R will print out the source code for that function!\n\n```{r}\nls\n```\n\nYou can use `rm` to delete objects you no longer need:\n\n```{r}\nrm(x)\n```\n\nIf you have lots of things in your environment and want to delete all of them,\nyou can pass the results of `ls` to the `rm` function:\n\n```{r}\nrm(list = ls())\n```\n\nIn this case we've combined the two. Like the order of operations, anything\ninside the innermost parentheses is evaluated first, and so on.\n\nIn this case we've specified that the results of `ls` should be used for the\n`list` argument in `rm`. When assigning values to arguments by name, you *must*\nuse the `=` operator!!\n\nIf instead we use `<-`, there will be unintended side effects, or you may get an error message:\n\n```{r, error=TRUE}\nrm(list <- ls())\n```\n\n> ## Challenge 4\n>\n> Clean up your working environment by deleting the mass and age\n> variables.\n>\n> > ## Solution to challenge 4\n> >\n> > We can use the `rm` command to accomplish this task\n> > ```{r ch4-sol}\n> > rm(age, mass)\n> > ```\n> {: .solution}\n{: .challenge}\n\n> ## Tip: Warnings vs. Errors\n>\n> Pay attention when R does something unexpected! Errors, like above,\n> are thrown when R cannot proceed with a calculation. Warnings on the\n> other hand usually mean that the function has run, but it probably\n> hasn't worked as expected.\n>\n> In both cases, the message that R prints out usually give you clues\n> how to fix a problem.\n>\n{: .callout}\n\n## R Packages\n\nYou can add functions to R by writing a package, or by\nobtaining a package written by someone else. As of this writing, there\nare over 10,000 packages available on CRAN (the comprehensive R archive\nnetwork). R and RStudio have functionality for managing packages:\n\n* You can see what packages are installed by typing\n  `installed.packages()`\n* You can install packages by typing `install.packages(\"packagename\")`,\n  where `packagename` is the package name, in quotes.\n* You can update installed packages by typing `update.packages()`\n* You can remove a package with `remove.packages(\"packagename\")`\n* You can make a package available for use with `library(packagename)`\n\nAll the packages you need for this lesson are installed on the library computers. \nIf you're using your own device, please install dplyr and ggplot2 using the\n`install.packages` function.\n",
    "created" : 1496884670339.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2753086809",
    "id" : "A5E293C2",
    "lastKnownWriteTime" : 1496883134,
    "last_content_update" : 1496883134,
    "path" : "~/Desktop/gitRepos/R-gaussi/_episodes_rmd/01-rstudio-intro.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}